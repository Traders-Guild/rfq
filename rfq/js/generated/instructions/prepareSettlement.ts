/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { AuthoritySide, authoritySideBeet } from '../types/AuthoritySide'

/**
 * @category Instructions
 * @category PrepareSettlement
 * @category generated
 */
export type PrepareSettlementInstructionArgs = {
  side: AuthoritySide
}
/**
 * @category Instructions
 * @category PrepareSettlement
 * @category generated
 */
export const prepareSettlementStruct = new beet.BeetArgsStruct<
  PrepareSettlementInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['side', authoritySideBeet],
  ],
  'PrepareSettlementInstructionArgs'
)
/**
 * Accounts required by the _prepareSettlement_ instruction
 *
 * @property [_writable_, **signer**] caller
 * @property [_writable_] quoteTokens
 * @property [] protocol
 * @property [] rfq
 * @property [_writable_] response
 * @property [] quoteMint
 * @property [_writable_] quoteEscrow
 * @category Instructions
 * @category PrepareSettlement
 * @category generated
 */
export type PrepareSettlementInstructionAccounts = {
  caller: web3.PublicKey
  quoteTokens: web3.PublicKey
  protocol: web3.PublicKey
  rfq: web3.PublicKey
  response: web3.PublicKey
  quoteMint: web3.PublicKey
  quoteEscrow: web3.PublicKey
  systemProgram?: web3.PublicKey
  tokenProgram?: web3.PublicKey
  rent?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const prepareSettlementInstructionDiscriminator = [
  171, 178, 160, 24, 97, 190, 39, 143,
]

/**
 * Creates a _PrepareSettlement_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category PrepareSettlement
 * @category generated
 */
export function createPrepareSettlementInstruction(
  accounts: PrepareSettlementInstructionAccounts,
  args: PrepareSettlementInstructionArgs,
  programId = new web3.PublicKey('3t9BM7DwaibpjNVWAWYauZyhjteoTjuJqGEqxCv7x9MA')
) {
  const [data] = prepareSettlementStruct.serialize({
    instructionDiscriminator: prepareSettlementInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.caller,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.quoteTokens,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.protocol,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rfq,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.response,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.quoteMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.quoteEscrow,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
