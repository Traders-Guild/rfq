/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { Leg, legBeet } from '../types/Leg'
import { OrderType, orderTypeBeet } from '../types/OrderType'
import { FixedSize, fixedSizeBeet } from '../types/FixedSize'

/**
 * @category Instructions
 * @category IntitializeRfq
 * @category generated
 */
export type IntitializeRfqInstructionArgs = {
  legs: Leg[]
  orderType: OrderType
  fixedSize: FixedSize
  activeWindow: number
  settlingWindow: number
}
/**
 * @category Instructions
 * @category IntitializeRfq
 * @category generated
 */
export const intitializeRfqStruct = new beet.FixableBeetArgsStruct<
  IntitializeRfqInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['legs', beet.array(legBeet)],
    ['orderType', orderTypeBeet],
    ['fixedSize', fixedSizeBeet],
    ['activeWindow', beet.u32],
    ['settlingWindow', beet.u32],
  ],
  'IntitializeRfqInstructionArgs'
)
/**
 * Accounts required by the _intitializeRfq_ instruction
 *
 * @property [_writable_, **signer**] taker
 * @property [] protocol
 * @property [_writable_, **signer**] rfq
 * @property [_writable_] collateralInfo
 * @property [] collateralToken
 * @property [] quoteMint
 * @property [] riskEngine
 * @category Instructions
 * @category IntitializeRfq
 * @category generated
 */
export type IntitializeRfqInstructionAccounts = {
  taker: web3.PublicKey
  protocol: web3.PublicKey
  rfq: web3.PublicKey
  collateralInfo: web3.PublicKey
  collateralToken: web3.PublicKey
  quoteMint: web3.PublicKey
  riskEngine: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const intitializeRfqInstructionDiscriminator = [
  183, 57, 11, 99, 162, 17, 74, 65,
]

/**
 * Creates a _IntitializeRfq_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category IntitializeRfq
 * @category generated
 */
export function createIntitializeRfqInstruction(
  accounts: IntitializeRfqInstructionAccounts,
  args: IntitializeRfqInstructionArgs,
  programId = new web3.PublicKey('3t9BM7DwaibpjNVWAWYauZyhjteoTjuJqGEqxCv7x9MA')
) {
  const [data] = intitializeRfqStruct.serialize({
    instructionDiscriminator: intitializeRfqInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.taker,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.protocol,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rfq,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.collateralInfo,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.collateralToken,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.quoteMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.riskEngine,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
