/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category Settle
 * @category generated
 */
export const settleStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'SettleInstructionArgs'
)
/**
 * Accounts required by the _settle_ instruction
 *
 * @property [] protocol
 * @property [] rfq
 * @property [_writable_] response
 * @property [_writable_] quoteReceiverTokens
 * @property [_writable_] quoteEscrow
 * @category Instructions
 * @category Settle
 * @category generated
 */
export type SettleInstructionAccounts = {
  protocol: web3.PublicKey
  rfq: web3.PublicKey
  response: web3.PublicKey
  quoteReceiverTokens: web3.PublicKey
  quoteEscrow: web3.PublicKey
  tokenProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const settleInstructionDiscriminator = [
  175, 42, 185, 87, 144, 131, 102, 212,
]

/**
 * Creates a _Settle_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category Settle
 * @category generated
 */
export function createSettleInstruction(
  accounts: SettleInstructionAccounts,
  programId = new web3.PublicKey('3t9BM7DwaibpjNVWAWYauZyhjteoTjuJqGEqxCv7x9MA')
) {
  const [data] = settleStruct.serialize({
    instructionDiscriminator: settleInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.protocol,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rfq,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.response,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.quoteReceiverTokens,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.quoteEscrow,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
