/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
/**
 * This type is used to derive the {@link PriceQuote} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link PriceQuote} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type PriceQuoteRecord = {
  AbsolutePrice: { amountBps: beet.bignum }
}

/**
 * Union type respresenting the PriceQuote data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isPriceQuote*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type PriceQuote = beet.DataEnumKeyAsKind<PriceQuoteRecord>

export const isPriceQuoteAbsolutePrice = (
  x: PriceQuote
): x is PriceQuote & { __kind: 'AbsolutePrice' } => x.__kind === 'AbsolutePrice'

/**
 * @category userTypes
 * @category generated
 */
export const priceQuoteBeet = beet.dataEnum<PriceQuoteRecord>([
  [
    'AbsolutePrice',
    new beet.BeetArgsStruct<PriceQuoteRecord['AbsolutePrice']>(
      [['amountBps', beet.u128]],
      'PriceQuoteRecord["AbsolutePrice"]'
    ),
  ],
]) as beet.FixableBeet<PriceQuote>
