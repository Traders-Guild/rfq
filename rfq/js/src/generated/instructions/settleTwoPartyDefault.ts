/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category SettleTwoPartyDefault
 * @category generated
 */
export const settleTwoPartyDefaultStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'SettleTwoPartyDefaultInstructionArgs'
)
/**
 * Accounts required by the _settleTwoPartyDefault_ instruction
 *
 * @property [] protocol
 * @property [_writable_] rfq
 * @property [_writable_] response
 * @property [_writable_] takerCollateralInfo
 * @property [_writable_] makerCollateralInfo
 * @property [_writable_] takerCollateralTokens
 * @property [_writable_] makerCollateralTokens
 * @property [_writable_] protocolCollateralTokens
 * @category Instructions
 * @category SettleTwoPartyDefault
 * @category generated
 */
export type SettleTwoPartyDefaultInstructionAccounts = {
  protocol: web3.PublicKey
  rfq: web3.PublicKey
  response: web3.PublicKey
  takerCollateralInfo: web3.PublicKey
  makerCollateralInfo: web3.PublicKey
  takerCollateralTokens: web3.PublicKey
  makerCollateralTokens: web3.PublicKey
  protocolCollateralTokens: web3.PublicKey
  tokenProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const settleTwoPartyDefaultInstructionDiscriminator = [
  197, 203, 62, 144, 188, 66, 214, 187,
]

/**
 * Creates a _SettleTwoPartyDefault_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category SettleTwoPartyDefault
 * @category generated
 */
export function createSettleTwoPartyDefaultInstruction(
  accounts: SettleTwoPartyDefaultInstructionAccounts,
  programId = new web3.PublicKey('EYZVRgDAWHahx3bJXFms7CoPA6ncwJFkGFPiTa15X8Fk')
) {
  const [data] = settleTwoPartyDefaultStruct.serialize({
    instructionDiscriminator: settleTwoPartyDefaultInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.protocol,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rfq,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.response,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.takerCollateralInfo,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.makerCollateralInfo,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.takerCollateralTokens,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.makerCollateralTokens,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.protocolCollateralTokens,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
