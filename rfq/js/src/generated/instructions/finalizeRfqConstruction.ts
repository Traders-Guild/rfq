/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category FinalizeRfqConstruction
 * @category generated
 */
export const finalizeRfqConstructionStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'FinalizeRfqConstructionInstructionArgs'
)
/**
 * Accounts required by the _finalizeRfqConstruction_ instruction
 *
 * @property [**signer**] taker
 * @property [] protocol
 * @property [_writable_] rfq
 * @property [_writable_] collateralInfo
 * @property [] collateralToken
 * @property [] riskEngine
 * @category Instructions
 * @category FinalizeRfqConstruction
 * @category generated
 */
export type FinalizeRfqConstructionInstructionAccounts = {
  taker: web3.PublicKey
  protocol: web3.PublicKey
  rfq: web3.PublicKey
  collateralInfo: web3.PublicKey
  collateralToken: web3.PublicKey
  riskEngine: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const finalizeRfqConstructionInstructionDiscriminator = [
  149, 197, 127, 87, 216, 120, 126, 178,
]

/**
 * Creates a _FinalizeRfqConstruction_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category FinalizeRfqConstruction
 * @category generated
 */
export function createFinalizeRfqConstructionInstruction(
  accounts: FinalizeRfqConstructionInstructionAccounts,
  programId = new web3.PublicKey('EYZVRgDAWHahx3bJXFms7CoPA6ncwJFkGFPiTa15X8Fk')
) {
  const [data] = finalizeRfqConstructionStruct.serialize({
    instructionDiscriminator: finalizeRfqConstructionInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.taker,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.protocol,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rfq,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.collateralInfo,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.collateralToken,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.riskEngine,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
