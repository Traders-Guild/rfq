/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { BaseAssetIndex, baseAssetIndexBeet } from '../types/BaseAssetIndex'
import { RiskCategory, riskCategoryBeet } from '../types/RiskCategory'
import { PriceOracle, priceOracleBeet } from '../types/PriceOracle'

/**
 * @category Instructions
 * @category AddBaseAsset
 * @category generated
 */
export type AddBaseAssetInstructionArgs = {
  index: BaseAssetIndex
  ticker: string
  riskCategory: RiskCategory
  priceOracle: PriceOracle
}
/**
 * @category Instructions
 * @category AddBaseAsset
 * @category generated
 */
export const addBaseAssetStruct = new beet.FixableBeetArgsStruct<
  AddBaseAssetInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['index', baseAssetIndexBeet],
    ['ticker', beet.utf8String],
    ['riskCategory', riskCategoryBeet],
    ['priceOracle', priceOracleBeet],
  ],
  'AddBaseAssetInstructionArgs'
)
/**
 * Accounts required by the _addBaseAsset_ instruction
 *
 * @property [_writable_, **signer**] authority
 * @property [] protocol
 * @property [_writable_] baseAsset
 * @category Instructions
 * @category AddBaseAsset
 * @category generated
 */
export type AddBaseAssetInstructionAccounts = {
  authority: web3.PublicKey
  protocol: web3.PublicKey
  baseAsset: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const addBaseAssetInstructionDiscriminator = [
  60, 235, 2, 96, 156, 243, 102, 42,
]

/**
 * Creates a _AddBaseAsset_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category AddBaseAsset
 * @category generated
 */
export function createAddBaseAssetInstruction(
  accounts: AddBaseAssetInstructionAccounts,
  args: AddBaseAssetInstructionArgs,
  programId = new web3.PublicKey('EYZVRgDAWHahx3bJXFms7CoPA6ncwJFkGFPiTa15X8Fk')
) {
  const [data] = addBaseAssetStruct.serialize({
    instructionDiscriminator: addBaseAssetInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.authority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.protocol,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.baseAsset,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
