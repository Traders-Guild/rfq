/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category AddInstrument
 * @category generated
 */
export type AddInstrumentInstructionArgs = {
  canBeUsedAsQuote: boolean
  validateDataAccountAmount: number
  prepareToSettleAccountAmount: number
  settleAccountAmount: number
  revertPreparationAccountAmount: number
  cleanUpAccountAmount: number
}
/**
 * @category Instructions
 * @category AddInstrument
 * @category generated
 */
export const addInstrumentStruct = new beet.BeetArgsStruct<
  AddInstrumentInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['canBeUsedAsQuote', beet.bool],
    ['validateDataAccountAmount', beet.u8],
    ['prepareToSettleAccountAmount', beet.u8],
    ['settleAccountAmount', beet.u8],
    ['revertPreparationAccountAmount', beet.u8],
    ['cleanUpAccountAmount', beet.u8],
  ],
  'AddInstrumentInstructionArgs'
)
/**
 * Accounts required by the _addInstrument_ instruction
 *
 * @property [**signer**] authority
 * @property [_writable_] protocol
 * @property [] instrumentProgram
 * @category Instructions
 * @category AddInstrument
 * @category generated
 */
export type AddInstrumentInstructionAccounts = {
  authority: web3.PublicKey
  protocol: web3.PublicKey
  instrumentProgram: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const addInstrumentInstructionDiscriminator = [
  105, 20, 159, 148, 221, 16, 80, 136,
]

/**
 * Creates a _AddInstrument_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category AddInstrument
 * @category generated
 */
export function createAddInstrumentInstruction(
  accounts: AddInstrumentInstructionAccounts,
  args: AddInstrumentInstructionArgs,
  programId = new web3.PublicKey('EYZVRgDAWHahx3bJXFms7CoPA6ncwJFkGFPiTa15X8Fk')
) {
  const [data] = addInstrumentStruct.serialize({
    instructionDiscriminator: addInstrumentInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.authority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.protocol,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.instrumentProgram,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
