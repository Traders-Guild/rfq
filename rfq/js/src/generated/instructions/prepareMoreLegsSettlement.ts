/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { AuthoritySide, authoritySideBeet } from '../types/AuthoritySide'

/**
 * @category Instructions
 * @category PrepareMoreLegsSettlement
 * @category generated
 */
export type PrepareMoreLegsSettlementInstructionArgs = {
  side: AuthoritySide
  legAmountToPrepare: number
}
/**
 * @category Instructions
 * @category PrepareMoreLegsSettlement
 * @category generated
 */
export const prepareMoreLegsSettlementStruct = new beet.BeetArgsStruct<
  PrepareMoreLegsSettlementInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['side', authoritySideBeet],
    ['legAmountToPrepare', beet.u8],
  ],
  'PrepareMoreLegsSettlementInstructionArgs'
)
/**
 * Accounts required by the _prepareMoreLegsSettlement_ instruction
 *
 * @property [**signer**] caller
 * @property [] protocol
 * @property [] rfq
 * @property [_writable_] response
 * @category Instructions
 * @category PrepareMoreLegsSettlement
 * @category generated
 */
export type PrepareMoreLegsSettlementInstructionAccounts = {
  caller: web3.PublicKey
  protocol: web3.PublicKey
  rfq: web3.PublicKey
  response: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const prepareMoreLegsSettlementInstructionDiscriminator = [
  180, 151, 90, 187, 14, 33, 23, 245,
]

/**
 * Creates a _PrepareMoreLegsSettlement_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category PrepareMoreLegsSettlement
 * @category generated
 */
export function createPrepareMoreLegsSettlementInstruction(
  accounts: PrepareMoreLegsSettlementInstructionAccounts,
  args: PrepareMoreLegsSettlementInstructionArgs,
  programId = new web3.PublicKey('EYZVRgDAWHahx3bJXFms7CoPA6ncwJFkGFPiTa15X8Fk')
) {
  const [data] = prepareMoreLegsSettlementStruct.serialize({
    instructionDiscriminator: prepareMoreLegsSettlementInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.caller,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.protocol,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rfq,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.response,
      isWritable: true,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
